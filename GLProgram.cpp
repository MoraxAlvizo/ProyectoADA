#include "GLProgram.h"

GLProgram::GLProgram(void)
{
	id = glCreateProgram();
}


GLProgram::~GLProgram(void)
{
	while(!shaders.empty())
	{
		GLShader * shader = shaders.back();
		if(shader)
			delete shader;
		shaders.pop_back();
	}
}

void GLProgram::addShader(GLShader *newShader)
{
	shaders.push_back(newShader);
}

void GLProgram::addVariable(string name)
{
	glUseProgram (id);
	int location = glGetUniformLocation (id, name.c_str());

	if(location == GL_INVALID_VALUE )
		cerr << "Error: program is not a value generated by OpenGL" << endl;
	else if(location == GL_INVALID_OPERATION)
		cerr << "Error: program has not been successfully linked or program is not a program object" << endl;
	else
		variables.insert(pair<string, int>(name, location));
}

int GLProgram::getVariable(string name)
{
	map<string , int >::const_iterator it = variables.find(name);

	if(it != variables.end())
		return variables[name];
	else 
		return NOT_EXIST;
}

bool GLProgram::createProgram()
{
	for(unsigned int index =0 ; index < shaders.size(); index ++ )
	{
		glAttachShader(id,shaders[index]->getID());
	}

	glLinkProgram(id);
	int params = -1;
	glGetProgramiv(id, GL_LINK_STATUS, &params);
	if(GL_TRUE != params){
		cerr << "Error: could not link programe GL index %i" << endl;
		_print_programme_info_log(id);
		return false;
	}

	return true;
}


void GLProgram::printAll (unsigned int m_programme_idx) {
	printf ("--------------------\nshader programme %i info:\n", m_programme_idx);
	int params = -1;
	glGetProgramiv (m_programme_idx, GL_LINK_STATUS, &params);
	char value[32];
	if (GL_TRUE == params) {
		strcpy (value, "GL_TRUE");
	} else {
		strcpy (value, "GL_FALSE");
	}
	printf ("GL_LINK_STATUS = %s\n", value);
  
	glGetProgramiv (m_programme_idx, GL_ATTACHED_SHADERS, &params);
	/*
	printf ("GL_ATTACHED_SHADERS = %i\n", params);
	if (m_has_vertex_shader) {
		printf ("  vertex shader index %i. file name: %s\n", m_vertex_shader_idx, m_vertex_shader_file_name);
	}
	if (m_has_fragment_shader) {
		printf ("  fragment shader index %i. file name: %s\n", m_fragment_shader_idx, m_fragment_shader_file_name);
	}*/
  
	glGetProgramiv (m_programme_idx, GL_ACTIVE_ATTRIBUTES, &params);
	printf ("GL_ACTIVE_ATTRIBUTES = %i\n", params);
	for ( int i = 0; i < params; i++) 
	{
		char name[64];
		int max_length = 64;
		int actual_length = 0;
		int size = 0;
		GLenum type;
		glGetActiveAttrib (m_programme_idx, i, max_length, &actual_length, &size, &type, name);
		if (size > 1) 
		{
			for (int j = 0; j < size; j++) 
			{
				char long_name[64];
				sprintf (long_name, "%s[%i]", name, j);
				int location = glGetAttribLocation (m_programme_idx, long_name);
				printf ("  %i) type:%s name:%s location:%i\n", i, GL_type_to_string (type), long_name, location);
			}
		} 
		else
		{
				int location = glGetAttribLocation (m_programme_idx, name);
				printf ("  %i) type:%s name:%s location:%i\n", i, GL_type_to_string (type), name, location);
		}
	}
  
	glGetProgramiv (m_programme_idx, GL_ACTIVE_UNIFORMS, &params);
	printf ("GL_ACTIVE_UNIFORMS = %i\n", params);
	for ( int i = 0; i < params; i++) {
		char name[64];
		int max_length = 64;
		int actual_length = 0;
		int size = 0;
		GLenum type;
		glGetActiveUniform (m_programme_idx, i, max_length, &actual_length, &size, &type, name);
		if (size > 1) 
		{
			for (int j = 0; j < size; j++) {
				char long_name[64];
				sprintf (long_name, "%s[%i]", name, j);
				int location = glGetUniformLocation (m_programme_idx, long_name);
				printf ("  %i) type:%s name:%s location:%i\n", i, GL_type_to_string (type), long_name, location);
			}
		} 
		else 
		{
			int location = glGetUniformLocation (m_programme_idx, name);
			printf ("  %i) type:%s name:%s location:%i\n", i, GL_type_to_string (type), name, location);
		}
	}
  
	_print_programme_info_log (id);
}

bool GLProgram::isValid (unsigned int m_programme_idx) {
	glValidateProgram (m_programme_idx);
	int params = -1;
	glGetProgramiv (m_programme_idx, GL_VALIDATE_STATUS, &params);
	if (GL_TRUE != params) {
		printf ("program %i GL_VALIDATE_STATUS = GL_FALSE\n", m_programme_idx);
		_print_programme_info_log (id);
		return false;
	}
	printf ("program %i GL_VALIDATE_STATUS = GL_TRUE\n", m_programme_idx);
	return true;
}